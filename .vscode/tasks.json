{
  "version": "2.0.0",
  "tasks": [
    {
      "label": "Install Dev Deps",
      "type": "shell",
      "command": "python3 -m venv venv && . venv/bin/activate && pip install --upgrade pip && (pip install -r requirements.txt || true) && pip install streamlit plotly pandas requests python-dotenv pydantic jsonschema",
      "windows": {
        "command": "python -m venv venv; if ($LASTEXITCODE -eq 0 -or (Test-Path venv)) { .\\venv\\Scripts\\python.exe -m pip install --upgrade pip; if (Test-Path requirements.txt) { .\\venv\\Scripts\\python.exe -m pip install -r requirements.txt }; .\\venv\\Scripts\\python.exe -m pip install streamlit plotly pandas requests python-dotenv pydantic jsonschema }",
        "options": {
          "shell": {
            "executable": "powershell.exe",
            "args": ["-Command"]
          }
        }
      },
      "group": "build",
      "presentation": {
        "reveal": "always",
        "panel": "new"
      },
      "problemMatcher": [],
      "detail": "Creates venv and installs all dependencies (requirements.txt + streamlit packages)"
    },
    {
      "label": "Run: Automation Runner (Dry-Run)",
      "type": "shell",
      "command": ". venv/bin/activate && (test -f .env && export $(cat .env | grep -v '^#' | xargs) || true) && export DRY_RUN=${DRY_RUN:-true} && export BROKER_NAME=${BROKER_NAME:-binance} && export BINANCE_BASE_URL=${BINANCE_BASE_URL:-https://testnet.binance.vision} && python automation/runner.py",
      "windows": {
        "command": ".\\venv\\Scripts\\python.exe -m dotenv -f .env run --override -- .\\venv\\Scripts\\python.exe automation/runner.py",
        "options": {
          "shell": {
            "executable": "powershell.exe",
            "args": ["-Command"]
          },
          "env": {
            "DRY_RUN": "true",
            "BROKER_NAME": "binance",
            "BINANCE_BASE_URL": "https://testnet.binance.vision"
          }
        }
      },
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "dedicated",
        "showReuseMessage": false
      },
      "problemMatcher": [],
      "detail": "Runs automation runner in DRY_RUN mode (loads .env if present, no API keys required)"
    },
    {
      "label": "Run: View Session (Streamlit)",
      "type": "shell",
      "command": ". venv/bin/activate && streamlit run tools/view_session_app.py --server.port 8501 --server.address 0.0.0.0 --server.headless true",
      "windows": {
        "command": ".\\venv\\Scripts\\python.exe -m dotenv -f .env run --override -- .\\venv\\Scripts\\python.exe -m streamlit run tools/view_session_app.py --server.port 8501 --server.address 0.0.0.0",
        "options": {
          "shell": {
            "executable": "powershell.exe",
            "args": ["-Command"]
          }
        }
      },
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "dedicated",
        "showReuseMessage": false
      },
      "isBackground": true,
      "problemMatcher": {
        "pattern": {
          "regexp": "^.*$"
        },
        "background": {
          "activeOnStart": true,
          "beginsPattern": ".*",
          "endsPattern": ".*(You can now view|Network URL).*"
        }
      },
      "detail": "Starts Streamlit View Session on port 8501"
    },
    {
      "label": "Dev: Live Session",
      "dependsOn": [
        "Run: Automation Runner (Dry-Run)",
        "Run: View Session (Streamlit)"
      ],
      "dependsOrder": "parallel",
      "problemMatcher": [],
      "presentation": {
        "reveal": "always",
        "panel": "dedicated"
      },
      "detail": "üöÄ ONE-CLICK: Start Automation Runner + View Session in parallel"
    },
    {
      "label": "Stop: All Sessions",
      "type": "shell",
      "command": "pkill -f 'streamlit run' || true",
      "windows": {
        "command": "taskkill /F /IM streamlit.exe /T || echo No Streamlit processes found"
      },
      "problemMatcher": [],
      "detail": "Stop all running Streamlit sessions"
    },
    {
      "label": "Live: Setup",
      "type": "shell",
      "command": "bash scripts/setup_live.sh",
      "windows": {
        "command": ".\\scripts\\setup_live.ps1",
        "options": {
          "shell": {
            "executable": "powershell.exe",
            "args": ["-Command"]
          }
        }
      },
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "dedicated",
        "showReuseMessage": false
      },
      "problemMatcher": [],
      "detail": "üîê Run secure setup wizard to store API keys in Windows Credential Manager"
    },
    {
      "label": "Live: Runner",
      "type": "shell",
      "command": "bash scripts/start_live_prod.sh",
      "windows": {
        "command": ".\\scripts\\start_live_prod.ps1",
        "options": {
          "shell": {
            "executable": "powershell.exe",
            "args": ["-Command"]
          }
        }
      },
      "group": "none",
      "presentation": {
        "reveal": "always",
        "panel": "dedicated",
        "showReuseMessage": false
      },
      "problemMatcher": [],
      "detail": "üö® LIVE PRODUCTION TRADING - Runs preflight checks then starts live trading (requires LIVE_ACK=I_UNDERSTAND)"
    },
    {
      "label": "Lint: PowerShell",
      "type": "shell",
      "command": "pwsh -Command \"Invoke-ScriptAnalyzer -Path scripts/*.ps1 -Settings PSGallery -Recurse\"",
      "windows": {
        "command": "pwsh -Command \"Invoke-ScriptAnalyzer -Path scripts/*.ps1 -Settings PSGallery -Recurse\"",
        "options": {
          "shell": {
            "executable": "powershell.exe",
            "args": ["-Command"]
          }
        }
      },
      "group": "test",
      "presentation": {
        "reveal": "always",
        "panel": "shared",
        "showReuseMessage": true
      },
      "problemMatcher": {
        "owner": "powershell",
        "fileLocation": ["relative", "${workspaceFolder}"],
        "pattern": {
          "regexp": "^(.*):(\\d+):(\\d+):\\s+(\\w+):\\s+(.*)$",
          "file": 1,
          "line": 2,
          "column": 3,
          "severity": 4,
          "message": 5
        }
      },
      "detail": "üîç Lint all PowerShell scripts using PSScriptAnalyzer"
    }
  ]
}
